{"version":3,"sources":["components/WeatherIcon/WeatherIcon.js","components/WeatherTile/WeatherTile.js","components/Weather/Weather.js","components/Time/Time.js","components/SettingsButton/SettingsButton.js","pages/Home/Home.js","pages/Settings/Settings.js","pages/404/404.js","serviceWorker.js","index.js"],"names":["WeatherIcon","daynig","_this$props","this","props","icon","alt","width","height","dn","hs","Date","getHours","MakeImgComponent","getWeatherIconURL","url","react_default","a","createElement","className","src","icon_id","Component","WeatherTile","temp_mode","Cookies","get","config","WeatherSettings","DefaultMode","temp","TempMode","toFixed","date","d","getMonth","getDate","getFullYear","morn","noon","eve","parse_date","style","margin","minWidth","parse_temp","components_WeatherIcon_WeatherIcon","weather_tile","Weather","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","error","temperature","city","country","humidity","description","weather_tiles","lat","lon","_this2","fetch","then","res","json","response","setState","main","name","sys","weather","id","err","wt","i","list","dt_txt","_this3","GetWeatherData","timerID","setInterval","tick","clearInterval","_this$state","alert","console","log","mapWeatherTiles","map","tile","components_WeatherTile_WeatherTile","key","Time","time_mode","TimeSettings","TimeMode","h","m","getMinutes","toString","padStart","t_str","hours","MM","DD","YYYY","parse_time","NORMAL","SettingsButton","container","href","react_router_dom","to","Home","LocationSettings","DefaultLatitude","DefaultLongitude","Location","bind","assertThisInitialized","setPos","la","lo","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","components_Time_Time","components_Weather_Weather","components_SettingsButton_SettingsButton","cookies","Settings","e","cookie_name","cookie_value","cookie_location","preventDefault","set","data","cookie_to_change","current_val","option","onClick","handleChange","map_buttons","TemperatureModes","TimeModes","Page404","color","textAlign","Boolean","window","location","hostname","match","root","document","getElementById","App","react_router","exact","path","render","pages_Home_Home","pages_Settings_Settings","_404","ReactDOM","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b7d76eb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass WeatherIcon extends Component {\r\n\r\n    render() {\r\n        const {icon, alt, width, height, dn} = this.props;\r\n        var daynig;\r\n        if (!this.props.dn) {\r\n            var hs = (new Date()).getHours();\r\n            daynig = (hs < 20 && hs > 5)? \"d\" : \"n\";\r\n        }\r\n        else daynig = dn;\r\n        return this.MakeImgComponent(this.getWeatherIconURL(icon, daynig), alt, width, height);\r\n    }\r\n    MakeImgComponent(url, alt, width, height) {\r\n        if (!width || !height) width = height = '50%';\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <img src={url} alt={alt} width={width} height={height} />\r\n            </div>\r\n        );\r\n    }\r\n    //map API icon_id to local image files for weather visualization\r\n    getWeatherIconURL(icon_id, dn) {\r\n        if (icon_id < 233) {    //200-232\r\n            return \"weather_img/200-232.svg\";\r\n        } else if (icon_id < 322) { //300-321\r\n            if (icon_id === 300)\r\n                return \"weather_img/300\" + dn + \".svg\";\r\n            else if (icon_id === 301)\r\n                return \"weather_img/301.svg\";\r\n            else if (icon_id === 314 || icon_id === 321)\r\n                return \"weather_img/314 321.svg\";\r\n            else return \"weather_img/302 310 311 312 313.svg\";\r\n        } else if (icon_id < 532) { //500-531\r\n            if (icon_id === 500)\r\n                return \"weather_img/500\" + dn + \".svg\";\r\n            else if (icon_id === 501)\r\n                return \"weather_img/501.svg\";\r\n            else if (icon_id === 502 || icon_id === 531)\r\n                return \"weather_img/502 531.svg\";\r\n            else if (icon_id === 503 || icon_id === 504 || icon_id === 522)\r\n                return \"weather_img/503 504 522.svg\";\r\n            else if (icon_id === 511)\r\n                return \"weather_img/511.svg\";\r\n            else if (icon_id === 520 || icon_id === 521)\r\n                return \"weather_img/520 521.svg\";\r\n        } else if (icon_id < 623) { //600-622\r\n            if (icon_id === 600)\r\n                return \"weather_img/600\" + dn + \".svg\";\r\n            else if (icon_id === 601 || icon_id === 602)\r\n                return \"weather_img/601 602.svg\";\r\n            else if (icon_id === 611 || icon_id === 615 || icon_id === 616 || icon_id === 620)\r\n                return \"weather_img/611 615 616 620.svg\";\r\n            else if (icon_id === 612 || icon_id === 613)\r\n                return \"weather_img/612 613\" + dn + \".svg\";\r\n            else if (icon_id === 621 || icon_id === 622)\r\n                return \"weather_img/621 622.svg\";\r\n            else if (icon_id === 520 || icon_id === 521)\r\n                return \"weather_img/520 521.svg\";\r\n        } else if (icon_id < 782) { //701-781\r\n            if (icon_id === 701 || icon_id === 711 || icon_id === 731 || icon_id === 751 || icon_id === 761 || icon_id === 762)\r\n                return \"weather_img/701 711 731 751 761 762.svg\";\r\n            else if (icon_id === 721)\r\n                return \"weather_img/721.svg\";\r\n            else if (icon_id === 741)\r\n                return \"weather_img/741.svg\";\r\n            else if (icon_id === 771)\r\n                return \"weather_img/771.svg\";\r\n            else if (icon_id === 781)\r\n                return \"weather_img/781.svg\";\r\n        } else if (icon_id < 805) { //800-804\r\n            if (icon_id === 800)\r\n                return \"weather_img/800\" + dn + \".svg\";\r\n            else if (icon_id === 801 || icon_id === 802)\r\n                return \"weather_img/801 802\" + dn + \".svg\";\r\n            else if (icon_id === 803 || icon_id === 804)\r\n                return \"weather_img/803 804.svg\";\r\n        }\r\n        else return null;\r\n    }\r\n}\r\nexport default WeatherIcon;","import React, {Component} from 'react';\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport config from '../../config.json';\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\n\r\nimport './WeatherTile.css';\r\n\r\nclass WeatherTile extends Component {\r\n\r\n    TempMode() {\r\n        const cookies = new Cookies();\r\n        var temp_mode = cookies.get(\"temp_mode\");\r\n        return (!temp_mode) ? config.WeatherSettings.DefaultMode : temp_mode;\r\n    }\r\n    parse_temp(temp) {\r\n        const temp_mode = this.TempMode();\r\n        switch(temp_mode) {\r\n            case \"K\":\r\n                return temp.toFixed(0);\r\n            case \"°F\":\r\n                return ((temp - 273.15) * (9/5) + (32)).toFixed(0);\r\n            case \"°C\":\r\n                return (temp - 273.15).toFixed(0);\r\n            default:\r\n                return \"Invalid Temperature Mode\";\r\n        }\r\n    }\r\n    parse_date(date) {\r\n        var d = new Date(date);\r\n        return (d.getMonth() + 1) + \"/\" + (d.getDate()) + \"/\" + (d.getFullYear());\r\n    }\r\n    render() {\r\n        const {date, morn, noon, eve, icon, dn} = this.props;\r\n        return (\r\n            <div className=\"weather-tile\">\r\n                <div className=\"weather-tile-date\">\r\n                    {this.parse_date(date)}\r\n                </div>\r\n                <div className=\"temp\">\r\n                    <div className=\"small-temp-text\">\r\n                        <table style={{margin: 'auto', width: '75%', minWidth: '95px'}}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        6am:\r\n                                    </td>\r\n                                    <td>\r\n                                        {this.parse_temp(morn)} {this.TempMode()}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        12pm:\r\n                                    </td>\r\n                                    <td>\r\n                                        {this.parse_temp(noon)} {this.TempMode()}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        6pm:\r\n                                    </td>\r\n                                    <td>\r\n                                        {this.parse_temp(eve)} {this.TempMode()}\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className=\"weather-icon-container\">\r\n                    <WeatherIcon icon={icon} dn={dn} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherTile;","import React, { Component } from 'react';\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport config from '../../config.json';\r\n\r\nimport './Weather.css';\r\nimport WeatherTile from '../WeatherTile/WeatherTile';\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\n\r\nconst WEATHER_API_KEY = \"c1d16b8b18a14269d269f0f4e6b614b8\";\r\nconst TILES_TO_DISPLAY = 3;\r\n\r\nfunction weather_tile(date, morn, noon, eve, icon) {\r\n        this.date = date;\r\n        this.morn = morn;\r\n        this.noon = noon;\r\n        this.eve = eve;\r\n        this.icon = icon;\r\n}\r\n\r\nclass Weather extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: \"\",\r\n            temperature: 0,\r\n            city: \"Unknown\",\r\n            country: \"Unknown\",\r\n            humidity: \"Unknown \",\r\n            description: \"Unknown \",\r\n            weather_tiles: []\r\n        }\r\n    }\r\n\r\n    GetWeatherData(lat, lon) {\r\n        //fetch current weather data\r\n        fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lon +\"&appid=\" + WEATHER_API_KEY)\r\n          .then(res => res.json())\r\n          .then(\r\n              (response) => {\r\n                  this.setState({\r\n                      temperature: response.main.temp,\r\n                      city: response.name,\r\n                      country: response.sys.country,\r\n                      humidity: response.main.humidity,\r\n                      description: response.weather[0].description,\r\n                      icon_id: response.weather[0].id,\r\n                      error: \"\"\r\n                  });\r\n              },\r\n              (err) => {\r\n                  this.setState({\r\n                      error: err\r\n                  });\r\n              }\r\n          );\r\n        //fetch 7 day forecast data\r\n        fetch(\"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon +\"&appid=\" + WEATHER_API_KEY)\r\n            .then(res => res.json())\r\n            .then(\r\n                (response) => {\r\n                    let wt = [];\r\n                    for (var i = 0; i < TILES_TO_DISPLAY; i++) {\r\n                        var morn = response.list[i*8 + 4];\r\n                        var noon = response.list[i*8 + 6];\r\n                        var eve = response.list[i*8 + 8];\r\n                        wt[i] = new weather_tile(noon.dt_txt, morn.main.temp, noon.main.temp, eve.main.temp, noon.weather[0].id);\r\n                    }\r\n                    this.setState({\r\n                        weather_tiles: wt\r\n                    });\r\n                },\r\n                (err) => {\r\n                    this.setState({\r\n                        error: err\r\n                    });\r\n                }\r\n            );\r\n      }\r\n\r\n    TempMode() {\r\n        const cookies = new Cookies();\r\n        var temp_mode = cookies.get(\"temp_mode\");\r\n        return (!temp_mode) ? config.WeatherSettings.DefaultMode : temp_mode;\r\n    }\r\n\r\n    parse_temp(temp) {\r\n        const temp_mode = this.TempMode();\r\n        switch(temp_mode) {\r\n            case \"K\":\r\n                return temp.toFixed(0);\r\n            case \"°F\":\r\n                return ((temp - 273.15) * (9/5) + (32)).toFixed(0);\r\n            case \"°C\":\r\n                return (temp - 273.15).toFixed(0);\r\n            default:\r\n                return \"Invalid Temperature Mode\";\r\n        }\r\n    }\r\n\r\n    //setup timer for self-updating\r\n    componentDidMount() {\r\n        //call once then wait\r\n        this.GetWeatherData(this.props.lat, this.props.lon);\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000 * 60 * 10  //10 minutes\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n    //self-update function\r\n    tick() {\r\n        this.GetWeatherData(this.props.lat, this.props.lon);\r\n    }\r\n\r\n    render() {\r\n        const {error, temperature, city, humidity, description, icon_id} = this.state;\r\n        const {country} = this.state;\r\n        const {weather_tiles} = this.state;\r\n        const temp_mode = this.TempMode();\r\n        if (error) {\r\n            alert(\"Error Getting Weather Data!\");\r\n            console.log(error);\r\n        }\r\n        return (\r\n            <div className=\"weather-container\">\r\n                <div className=\"weather-attrib-container\">\r\n                    <div className=\"weather-attrib\" id=\"temperature\">\r\n                        {this.parse_temp(temperature)}{temp_mode}\r\n                    </div>\r\n                    <div className=\"weather-attrib\" id=\"icon\">\r\n                        <WeatherIcon icon={icon_id} />\r\n                    </div>\r\n                    <div className=\"weather-attrib\" id=\"details\">\r\n                        Humidity: {humidity}% ----- {description}\r\n                        <br />\r\n                        {city}, {country}\r\n                    </div>\r\n                </div>\r\n                <div className=\"weather-tiles-container\">\r\n                    {this.mapWeatherTiles(weather_tiles)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    mapWeatherTiles(weather_tiles) {\r\n        return weather_tiles.map((tile, id) => (\r\n            <WeatherTile key={id} date={tile.date} morn={tile.morn} noon={tile.noon} eve={tile.eve} icon={tile.icon} dn={\"d\"} />\r\n        ));\r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport config from '../../config.json';\r\nimport './Time.css';\r\n\r\n\r\nclass Time extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date()\r\n        };\r\n    }\r\n\r\n    TimeMode() {\r\n        const cookies = new Cookies();\r\n        var time_mode = cookies.get(\"time_mode\");\r\n        return (!time_mode) ? config.TimeSettings.DefaultMode : time_mode;\r\n    }\r\n\r\n    parse_time() {\r\n        const time_mode = this.TimeMode();\r\n        const {date} = this.state;\r\n        const h = date.getHours(), m = date.getMinutes().toString().padStart(2, '0');\r\n        var t_str = \"\";\r\n        switch(time_mode) {\r\n            case \"24HR\":\r\n                t_str = h.toString().padStart(2, '0') + \":\" + m;\r\n                break;\r\n            case \"12HR\":\r\n                var hours = h % 12;\r\n                t_str = ((hours === 0) ? 12 : hours) + \":\" + m + ((h >= 12) ? \"p\" : \"a\");\r\n                break;\r\n            default:\r\n                t_str = \"Invalid Time Mode\";\r\n                break;\r\n        }\r\n        return t_str;\r\n    }\r\n\r\n    //setup self-update interval\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000 //every second\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n    //self-update function\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {date} = this.state;\r\n        const MM = date.getMonth() + 1, DD = date.getDate(), YYYY = date.getFullYear().toString().padStart(4, '0');\r\n        return (\r\n            <div className=\"time-container\">\r\n                <div className=\"display-container\">\r\n                    <div className=\"time-display\">\r\n                        {this.parse_time()}\r\n                    </div>\r\n                    <div className=\"date-display\">\r\n                        {MM}/{DD}/{YYYY}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Time;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport './SettingsButton.css';\r\n\r\nconst NORMAL = \"sbcont\";\r\n\r\nclass SettingsButton extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            container: NORMAL\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {href} = this.props;\r\n        return (\r\n            <Link to={href}>\r\n                <div className=\"sbcont\">\r\n                    <div className=\"bar1\"></div>\r\n                    <div className=\"bar2\"></div>\r\n                    <div className=\"bar3\"></div>\r\n                </div>\r\n            </Link>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SettingsButton;","import React, { Component } from 'react';\r\n\r\nimport Weather from '../../components/Weather/Weather';\r\nimport Time from '../../components/Time/Time';\r\nimport SettingsButton from '../../components/SettingsButton/SettingsButton';\r\n\r\nimport config from '../../config.json';\r\n\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lat: config.LocationSettings.DefaultLatitude,\r\n            lon: config.LocationSettings.DefaultLongitude\r\n        }\r\n        this.Location = this.Location.bind(this);\r\n        this.setPos = this.setPos.bind(this);\r\n    }\r\n\r\n    setPos(la, lo) {\r\n        this.setState({\r\n            lat: la,\r\n            lon: lo\r\n        });\r\n    }\r\n\r\n    Location() {\r\n        if (\"geolocation\" in navigator) {\r\n            /* geolocation is available */\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                this.setPos(position.coords.latitude, position.coords.longitude);\r\n            });\r\n        } else {\r\n            alert(\"Can't Read Geolocation, using default...\");\r\n            this.setPos(config.LocationSettings.DefaultLatitude, config.LocationSettings.DefaultLongitude);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.Location();\r\n    }\r\n\r\n    render() {\r\n        const {lat, lon} = this.state;\r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"content\">\r\n                    <div className=\"content-column\" id=\"time\">\r\n                        <Time lat={lat} lon={lon} />\r\n                    </div>\r\n                    <div className=\"content-column\" id=\"weather\">\r\n                        <Weather lat={lat} lon={lon} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"bottom-panel\">\r\n                    <SettingsButton href={'/settings'}/>\r\n                </div>\r\n                <div className=\"copyright\">\r\n                    Copyright {'\\u00A9'} 2019 Jared Massa\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport config from '../../config.json';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport './Settings.css';\r\n\r\nconst cookies = new Cookies();\r\nclass Settings extends Component {\r\n\r\n    handleChange(e, cookie_name, cookie_value, cookie_location) {\r\n        e.preventDefault();\r\n        cookies.set(cookie_name, cookie_value, cookie_location);\r\n        //refresh component for button coloring\r\n        this.setState({});\r\n    }\r\n\r\n    map_buttons(data, cookie_to_change, current_val) {\r\n        return data.map( (option, id) => (\r\n            <button\r\n                className=\"option-button\"\r\n                id={ (option === current_val) ? \"selected\" : \"\" }\r\n                key={id}\r\n                onClick={(e) => this.handleChange(e, cookie_to_change, option, '/')}>\r\n                {option}\r\n            </button>\r\n        ));\r\n    }\r\n\r\n    TimeMode() {\r\n        const cookies = new Cookies();\r\n        var time_mode = cookies.get(\"time_mode\");\r\n        return (!time_mode) ? config.TimeSettings.DefaultMode : time_mode;\r\n    }\r\n    TempMode() {\r\n        const cookies = new Cookies();\r\n        var temp_mode = cookies.get(\"temp_mode\");\r\n        return (!temp_mode) ? config.WeatherSettings.DefaultMode : temp_mode;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"settings-content\">\r\n                <table className=\"options-section\">\r\n                    <tbody>\r\n                        <tr className=\"WeatherSettings\">\r\n                            <td>\r\n                                Temperature Mode:\r\n                            </td>\r\n                            <td>\r\n                                {this.map_buttons(config.WeatherSettings.TemperatureModes, 'temp_mode', this.TempMode())}\r\n                            </td>\r\n                        </tr>\r\n                        <tr className=\"TimeSettings\">\r\n                            <td>\r\n                                Time Mode:\r\n                            </td>\r\n                            <td>\r\n                                {this.map_buttons(config.TimeSettings.TimeModes, 'time_mode', this.TimeMode())}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <Link to={\"/\"}>\r\n                    <div className=\"back-button\">\r\n                        {\"<< Go Back\"}\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Settings;","import React, { Component } from 'react';\r\n\r\nclass Page404 extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{color:\"white\", textAlign:'center', width:\"100%\", height:\"100%\"}}>\r\n                <h1>404</h1>\r\n                <h3>Page not found.</h3>\r\n                <p>\r\n                    There's only two pages on this site...  What were you looking for?\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Page404;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\n\r\nimport Home from './pages/Home/Home';\r\nimport Settings from './pages/Settings/Settings';\r\nimport Page404 from './pages/404/404';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return(\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <Home />} />\r\n                <Route path={'/settings'} render={() => <Settings  />} />\r\n                <Route render={() => <Page404 />} />\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n<Router>\r\n    <App />\r\n</Router>,\r\nroot);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}