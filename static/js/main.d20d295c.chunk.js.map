{"version":3,"sources":["components/Weather/Weather.js","components/Time/Time.js","pages/Home/Home.js","serviceWorker.js","index.js"],"names":["Weather","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","temperature","city","humidity","description","list","zip","country","_this2","fetch","then","res","json","response","setState","main","temp","name","weather","icon_id","id","err","config","WeatherSettings","SelectedMode","TempMode","toFixed","_this3","GetWeatherData","timerID","setInterval","tick","clearInterval","_this$state","temp_mode","react_default","a","createElement","className","parse_temp","getWeatherImage","url","alt","width","height","src","MakeImgComponent","Component","Time","date","Date","TimeSettings","time_mode","TimeMode","h","getHours","m","getMinutes","toString","padStart","t_str","hours","MM","getMonth","DD","getDate","YYYY","getFullYear","parse_time","Home","LocationSettings","Zip","Country","loc","Location","components_Weather_Weather","components_Time_Time","Boolean","window","location","hostname","match","ReactDOM","render","pages_Home_Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d20d295c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport config from '../../config.json';\r\n\r\nimport './Weather.css';\r\n\r\nconst WEATHER_API_KEY = \"c1d16b8b18a14269d269f0f4e6b614b8\";\r\n\r\nclass Weather extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: \"\",\r\n            temperature: 0,\r\n            city: \"Unknown\",\r\n            humidity: \"Unknown \",\r\n            description: \"Unknown \",\r\n            list: []\r\n        }\r\n    }\r\n\r\n    GetWeatherData(zip, country) {\r\n        //fetch current weather data\r\n        fetch(\"https://api.openweathermap.org/data/2.5/weather?zip=\" + zip + \",\" + country +\"&appid=\" + WEATHER_API_KEY)\r\n          .then(res => res.json())\r\n          .then(\r\n            (response) => {\r\n              this.setState({\r\n                temperature: response.main.temp,\r\n                city: response.name,\r\n                humidity: response.main.humidity,\r\n                description: response.weather[0].description,\r\n                icon_id: response.weather[0].id,\r\n                error: \"\"\r\n              });\r\n            },\r\n            (err) => {\r\n              this.setState({\r\n                error: err\r\n              });\r\n            }\r\n          );\r\n        //fetch 7 day forecast data\r\n        fetch(\"api.openweathermap.org/data/2.5/forecast/daily?zip=\" + zip + \",\" + country +\"&appid=\" + WEATHER_API_KEY)\r\n      }\r\n\r\n    TempMode() {\r\n        return config.WeatherSettings.SelectedMode;\r\n    }\r\n\r\n    parse_temp(temp) {\r\n        const temp_mode = this.TempMode();\r\n        switch(temp_mode) {\r\n            case \"K\":\r\n                return temp;\r\n            case \"°F\":\r\n                return ((temp - 273.15) * (9/5) + (32)).toFixed(2);\r\n            case \"°C\":\r\n                return (temp - 273.15).toFixed(2);\r\n            default:\r\n                return \"Invalid Temperature Mode\";\r\n        }\r\n    }\r\n\r\n    //setup timer for self-updating\r\n    componentDidMount() {\r\n        //call once then wait\r\n        this.GetWeatherData(this.props.zip, this.props.country);\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000 * 60 * 10  //10 minutes\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n    //self-update function\r\n    tick() {\r\n        this.GetWeatherData(this.props.zip, this.props.country);\r\n    }\r\n\r\n    render() {\r\n        const {error, temperature, city, humidity, description, icon_id} = this.state;\r\n        const {country} = this.props;\r\n        const temp_mode = this.TempMode();\r\n        if (error) {\r\n            return \"Error\";\r\n        }\r\n        return (\r\n            <div className=\"weather-container\">\r\n                <div className=\"weather-attrib\" id=\"conditions\">\r\n                    {this.parse_temp(temperature)} {temp_mode}\r\n                    <br />\r\n                    Humidity: {humidity}%\r\n                </div>\r\n                <div className=\"weather-attrib\" id=\"description\">\r\n                    {this.getWeatherImage(icon_id)}\r\n                    <br />\r\n                    {description}\r\n                </div>\r\n                <div className=\"weather-attrib\" id=\"location\">\r\n                    {city}, {country}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    MakeImgComponent(url, alt, width, height) {\r\n        if (!width || !height) width = height = 100;\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <img src={url} alt={alt} width={width} height={height} />\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    //map API icon_id to local image files for weather visualization\r\n    getWeatherImage(icon_id) {\r\n        if (icon_id < 233) {    //200-232\r\n            return this.MakeImgComponent(\"weather_img/200-232.svg\");\r\n        } else if (icon_id < 322) { //300-321\r\n            if (icon_id === 300)\r\n                return this.MakeImgComponent(\"weather_img/300d.svg\");\r\n            else if (icon_id === 301)\r\n                return this.MakeImgComponent(\"weather_img/301.svg\");\r\n            else if (icon_id === 314 || icon_id === 321)\r\n                return this.MakeImgComponent(\"weather_img/314 321.svg\");\r\n            else return this.MakeImgComponent(\"weather_img/302 310 311 312 313.svg\");\r\n        } else if (icon_id < 532) { //500-531\r\n            if (icon_id === 500)\r\n                return this.MakeImgComponent(\"weather_img/500d.svg\");\r\n            else if (icon_id === 501)\r\n                return this.MakeImgComponent(\"weather_img/501.svg\");\r\n            else if (icon_id === 502 || icon_id === 531)\r\n                return this.MakeImgComponent(\"weather_img/502 531.svg\");\r\n            else if (icon_id === 503 || icon_id === 504 || icon_id === 522)\r\n                return this.MakeImgComponent(\"weather_img/503 504 522.svg\");\r\n            else if (icon_id === 511)\r\n                return this.MakeImgComponent(\"weather_img/511.svg\");\r\n            else if (icon_id === 520 || icon_id === 521)\r\n                return this.MakeImgComponent(\"weather_img/520 521.svg\");\r\n        } else if (icon_id < 623) { //600-622\r\n            if (icon_id === 600)\r\n                return this.MakeImgComponent(\"weather_img/600d.svg\");\r\n            else if (icon_id === 601 || icon_id === 602)\r\n                return this.MakeImgComponent(\"weather_img/601 602.svg\");\r\n            else if (icon_id === 611 || icon_id === 615 || icon_id === 616 || icon_id === 620)\r\n                return this.MakeImgComponent(\"weather_img/611 615 616 620.svg\");\r\n            else if (icon_id === 612 || icon_id === 613)\r\n                return this.MakeImgComponent(\"weather_img/612 613d.svg\");\r\n            else if (icon_id === 621 || icon_id === 622)\r\n                return this.MakeImgComponent(\"weather_img/621 622.svg\");\r\n            else if (icon_id === 520 || icon_id === 521)\r\n                return this.MakeImgComponent(\"weather_img/520 521.svg\");\r\n        } else if (icon_id < 782) { //701-781\r\n            if (icon_id === 701 || icon_id === 711 || icon_id === 731 || icon_id === 751 || icon_id === 761 || icon_id === 762)\r\n                return this.MakeImgComponent(\"weather_img/701 711 731 751 761 762.svg\");\r\n            else if (icon_id === 721)\r\n                return this.MakeImgComponent(\"weather_img/721.svg\");\r\n            else if (icon_id === 741)\r\n                return this.MakeImgComponent(\"weather_img/741.svg\");\r\n            else if (icon_id === 771)\r\n                return this.MakeImgComponent(\"weather_img/771.svg\");\r\n            else if (icon_id === 781)\r\n                return this.MakeImgComponent(\"weather_img/781.svg\");\r\n        } else if (icon_id < 805) { //800-804\r\n            if (icon_id === 800)\r\n                return this.MakeImgComponent(\"weather_img/800d.svg\");\r\n            else if (icon_id === 801 || icon_id === 802)\r\n                return this.MakeImgComponent(\"weather_img/801 802d.svg\");\r\n            else if (icon_id === 803 || icon_id === 804)\r\n                return this.MakeImgComponent(\"weather_img/803 804.svg\");\r\n        }\r\n        else return null;\r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\r\nimport config from '../../config.json';\r\nimport './Time.css';\r\n\r\n\r\nclass Time extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date()\r\n        };\r\n    }\r\n\r\n    TimeMode() {\r\n        return config.TimeSettings.SelectedMode;\r\n    }\r\n\r\n    parse_time() {\r\n        const time_mode = this.TimeMode();\r\n        const {date} = this.state;\r\n        const h = date.getHours(), m = date.getMinutes().toString().padStart(2, '0');\r\n        var t_str = \"\";\r\n        switch(time_mode) {\r\n            case \"24HR\":\r\n                t_str = h + \":\" + m;\r\n                break;\r\n            case \"12HR\":\r\n                var hours = h % 12;\r\n                t_str = hours + \":\" + m + ((hours !== h) ? \"p\" : \"a\");\r\n                break;\r\n            default:\r\n                t_str = \"Invalid Time Mode\";\r\n                break;\r\n        }\r\n        return t_str;\r\n    }\r\n\r\n    //setup self-update interval\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000 //every second\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n    //self-update function\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {date} = this.state;\r\n        const MM = date.getMonth() + 1, DD = date.getDate(), YYYY = date.getFullYear().toString().padStart(4, '0');\r\n        return (\r\n            <div className=\"time-container\">\r\n                <div className=\"display-container\">\r\n                    <div className=\"time-display\">\r\n                        {this.parse_time()}\r\n                    </div>\r\n                    <div className=\"date-display\">\r\n                        {MM}/{DD}/{YYYY}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Time;","import React, { Component } from 'react';\nimport Weather from '../../components/Weather/Weather';\nimport Time from '../../components/Time/Time';\n\nimport config from '../../config.json';\n\nimport './Home.css';\n\nclass Home extends Component {\n\n    Location() {\n        return [config.LocationSettings.Zip, config.LocationSettings.Country];\n    }\n\n    render() {\n        const loc = this.Location();\n        const zip = loc[0], country = loc[1];\n        return (\n            <div className=\"content\">\n                <Weather zip={zip} country={country} />\n                <Time zip={zip} country={country} />\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './pages/Home/Home';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}