{"version":3,"sources":["components/WeatherIcon/WeatherIcon.js","components/WeatherTile/WeatherTile.js","components/Weather/Weather.js","components/Time/Time.js","components/SettingsButton/SettingsButton.js","pages/Home/Home.js","pages/Settings/Settings.js","pages/404/404.js","serviceWorker.js","index.js"],"names":["WeatherIcon","_this$props","this","props","icon","alt","width","height","MakeImgComponent","getWeatherIconURL","url","react_default","a","createElement","className","src","icon_id","hs","Date","getHours","dn","Component","WeatherTile","config","WeatherSettings","SelectedMode","temp","TempMode","toFixed","date","d","getMonth","getDate","getFullYear","high","low","parse_date","parse_temp","components_WeatherIcon_WeatherIcon","weather_tile","Weather","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","error","temperature","city","humidity","description","weather_tiles","zip","country","_this2","fetch","then","res","json","response","setState","main","name","weather","id","err","wt","i","morn","list","noon","eve","dt_txt","temp_min","temp_max","_this3","GetWeatherData","timerID","setInterval","tick","clearInterval","_this$state","temp_mode","mapWeatherTiles","map","tile","components_WeatherTile_WeatherTile","key","Time","TimeSettings","time_mode","TimeMode","h","m","getMinutes","toString","padStart","t_str","hours","MM","DD","YYYY","parse_time","NORMAL","SettingsButton","container","href","react_router_dom","to","Home","LocationSettings","Zip","Country","loc","Location","components_Time_Time","components_Weather_Weather","components_SettingsButton_SettingsButton","Settings","Page404","style","color","textAlign","Boolean","window","location","hostname","match","root","document","getElementById","App","react_router","console","log","process","exact","path","component","hashHistory","createHashHistory","basename","ReactDOM","render","history","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2967218.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass WeatherIcon extends Component {\r\n\r\n    render() {\r\n        const {icon, alt, width, height} = this.props;\r\n        return this.MakeImgComponent(this.getWeatherIconURL(icon), alt, width, height);\r\n    }\r\n    MakeImgComponent(url, alt, width, height) {\r\n        if (!width || !height) width = height = '50%';\r\n        return (\r\n            <div className=\"weather-icon\">\r\n                <img src={'../' + url} alt={alt} width={width} height={height} />\r\n            </div>\r\n        );\r\n    }\r\n    //map API icon_id to local image files for weather visualization\r\n    getWeatherIconURL(icon_id) {\r\n        var hs = (new Date()).getHours();\r\n        var dn = (hs < 20 && hs > 5)? \"d\" : \"n\";\r\n        if (icon_id < 233) {    //200-232\r\n            return \"weather_img/200-232.svg\";\r\n        } else if (icon_id < 322) { //300-321\r\n            if (icon_id === 300)\r\n                return \"weather_img/300\" + dn + \".svg\";\r\n            else if (icon_id === 301)\r\n                return \"weather_img/301.svg\";\r\n            else if (icon_id === 314 || icon_id === 321)\r\n                return \"weather_img/314 321.svg\";\r\n            else return \"weather_img/302 310 311 312 313.svg\";\r\n        } else if (icon_id < 532) { //500-531\r\n            if (icon_id === 500)\r\n                return \"weather_img/500\" + dn + \".svg\";\r\n            else if (icon_id === 501)\r\n                return \"weather_img/501.svg\";\r\n            else if (icon_id === 502 || icon_id === 531)\r\n                return \"weather_img/502 531.svg\";\r\n            else if (icon_id === 503 || icon_id === 504 || icon_id === 522)\r\n                return \"weather_img/503 504 522.svg\";\r\n            else if (icon_id === 511)\r\n                return \"weather_img/511.svg\";\r\n            else if (icon_id === 520 || icon_id === 521)\r\n                return \"weather_img/520 521.svg\";\r\n        } else if (icon_id < 623) { //600-622\r\n            if (icon_id === 600)\r\n                return \"weather_img/600\" + dn + \".svg\";\r\n            else if (icon_id === 601 || icon_id === 602)\r\n                return \"weather_img/601 602.svg\";\r\n            else if (icon_id === 611 || icon_id === 615 || icon_id === 616 || icon_id === 620)\r\n                return \"weather_img/611 615 616 620.svg\";\r\n            else if (icon_id === 612 || icon_id === 613)\r\n                return \"weather_img/612 613\" + dn + \".svg\";\r\n            else if (icon_id === 621 || icon_id === 622)\r\n                return \"weather_img/621 622.svg\";\r\n            else if (icon_id === 520 || icon_id === 521)\r\n                return \"weather_img/520 521.svg\";\r\n        } else if (icon_id < 782) { //701-781\r\n            if (icon_id === 701 || icon_id === 711 || icon_id === 731 || icon_id === 751 || icon_id === 761 || icon_id === 762)\r\n                return \"weather_img/701 711 731 751 761 762.svg\";\r\n            else if (icon_id === 721)\r\n                return \"weather_img/721.svg\";\r\n            else if (icon_id === 741)\r\n                return \"weather_img/741.svg\";\r\n            else if (icon_id === 771)\r\n                return \"weather_img/771.svg\";\r\n            else if (icon_id === 781)\r\n                return \"weather_img/781.svg\";\r\n        } else if (icon_id < 805) { //800-804\r\n            if (icon_id === 800)\r\n                return \"weather_img/800\" + dn + \".svg\";\r\n            else if (icon_id === 801 || icon_id === 802)\r\n                return \"weather_img/801 802\" + dn + \".svg\";\r\n            else if (icon_id === 803 || icon_id === 804)\r\n                return \"weather_img/803 804.svg\";\r\n        }\r\n        else return null;\r\n    }\r\n}\r\nexport default WeatherIcon;","import React, {Component} from 'react';\r\n\r\nimport config from '../../config.json';\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\n\r\nimport './WeatherTile.css';\r\n\r\nclass WeatherTile extends Component {\r\n\r\n    TempMode() {\r\n        return config.WeatherSettings.SelectedMode;\r\n    }\r\n    parse_temp(temp) {\r\n        const temp_mode = this.TempMode();\r\n        switch(temp_mode) {\r\n            case \"K\":\r\n                return temp.toFixed(0);\r\n            case \"°F\":\r\n                return ((temp - 273.15) * (9/5) + (32)).toFixed(0);\r\n            case \"°C\":\r\n                return (temp - 273.15).toFixed(0);\r\n            default:\r\n                return \"Invalid Temperature Mode\";\r\n        }\r\n    }\r\n    parse_date(date) {\r\n        var d = new Date(date);\r\n        return (d.getMonth() + 1) + \"/\" + (d.getDate()) + \"/\" + (d.getFullYear());\r\n    }\r\n    render() {\r\n        const {date, high, low, icon} = this.props;\r\n        return (\r\n            <div className=\"weather-tile\">\r\n                <div className=\"date\">\r\n                    {this.parse_date(date)}\r\n                </div>\r\n                <div className=\"temp\">\r\n                    <div className=\"small-temp-text\">\r\n                        {this.parse_temp(low)}\r\n                        -->\r\n                        {this.parse_temp(high)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"weather-icon\">\r\n                    <WeatherIcon icon={icon} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherTile;","import React, { Component } from 'react';\r\nimport config from '../../config.json';\r\n\r\nimport './Weather.css';\r\nimport WeatherTile from '../WeatherTile/WeatherTile';\r\nimport WeatherIcon from '../WeatherIcon/WeatherIcon';\r\n\r\nconst WEATHER_API_KEY = \"c1d16b8b18a14269d269f0f4e6b614b8\";\r\nconst TILES_TO_DISPLAY = 3;\r\n\r\nfunction weather_tile(date, low, high, icon) {\r\n        this.date = date;\r\n        this.low = low;\r\n        this.high = high;\r\n        this.icon = icon;\r\n}\r\n\r\nclass Weather extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: \"\",\r\n            temperature: 0,\r\n            city: \"Unknown\",\r\n            humidity: \"Unknown \",\r\n            description: \"Unknown \",\r\n            weather_tiles: []\r\n        }\r\n    }\r\n\r\n    GetWeatherData(zip, country) {\r\n        //fetch current weather data\r\n        fetch(\"https://api.openweathermap.org/data/2.5/weather?zip=\" + zip + \",\" + country +\"&appid=\" + WEATHER_API_KEY)\r\n          .then(res => res.json())\r\n          .then(\r\n              (response) => {\r\n                  this.setState({\r\n                      temperature: response.main.temp,\r\n                      city: response.name,\r\n                      humidity: response.main.humidity,\r\n                      description: response.weather[0].description,\r\n                      icon_id: response.weather[0].id,\r\n                      error: \"\"\r\n                  });\r\n              },\r\n              (err) => {\r\n                  this.setState({\r\n                      error: err\r\n                  });\r\n              }\r\n          );\r\n        //fetch 7 day forecast data\r\n        fetch(\"https://api.openweathermap.org/data/2.5/forecast?zip=\" + zip + \",\" + country +\"&appid=\" + WEATHER_API_KEY)\r\n            .then(res => res.json())\r\n            .then(\r\n                (response) => {\r\n                    let wt = [];\r\n                    for (var i = 0; i < TILES_TO_DISPLAY; i++) {\r\n                        var morn = response.list[i*8 + 2];\r\n                        var noon = response.list[i*8 + 4];\r\n                        var eve = response.list[i*8 + 6];\r\n                        wt[i] = new weather_tile(noon.dt_txt, morn.main.temp_min, eve.main.temp_max, noon.weather[0].id);\r\n                    }\r\n                    this.setState({\r\n                        weather_tiles: wt\r\n                    });\r\n                },\r\n                (err) => {\r\n                    this.setState({\r\n                        error: err\r\n                    });\r\n                }\r\n            );\r\n      }\r\n\r\n    TempMode() {\r\n        return config.WeatherSettings.SelectedMode;\r\n    }\r\n\r\n    parse_temp(temp) {\r\n        const temp_mode = this.TempMode();\r\n        switch(temp_mode) {\r\n            case \"K\":\r\n                return temp.toFixed(0);\r\n            case \"°F\":\r\n                return ((temp - 273.15) * (9/5) + (32)).toFixed(0);\r\n            case \"°C\":\r\n                return (temp - 273.15).toFixed(0);\r\n            default:\r\n                return \"Invalid Temperature Mode\";\r\n        }\r\n    }\r\n\r\n    //setup timer for self-updating\r\n    componentDidMount() {\r\n        //call once then wait\r\n        this.GetWeatherData(this.props.zip, this.props.country);\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000 * 60 * 10  //10 minutes\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n    //self-update function\r\n    tick() {\r\n        this.GetWeatherData(this.props.zip, this.props.country);\r\n    }\r\n\r\n    render() {\r\n        const {error, temperature, city, humidity, description, icon_id} = this.state;\r\n        const {country} = this.props;\r\n        const {weather_tiles} = this.state;\r\n        const temp_mode = this.TempMode();\r\n        if (error) {\r\n            return \"Error\";\r\n        }\r\n        return (\r\n            <div className=\"weather-container\">\r\n                <div className=\"weather-attrib-container\">\r\n                    <div className=\"weather-attrib\" id=\"temperature\">\r\n                        {this.parse_temp(temperature)}{temp_mode}\r\n                    </div>\r\n                    <div className=\"weather-attrib\" id=\"icon\">\r\n                        <WeatherIcon icon={icon_id} />\r\n                    </div>\r\n                    <div className=\"weather-attrib\" id=\"details\">\r\n                        Humidity: {humidity}% ----- {description}\r\n                        <br />\r\n                        {city}, {country}\r\n                    </div>\r\n                </div>\r\n                <div className=\"weather-tiles-container\">\r\n                    {this.mapWeatherTiles(weather_tiles)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    mapWeatherTiles(weather_tiles) {\r\n        return weather_tiles.map((tile, id) => (\r\n            <WeatherTile key={id} date={tile.date} low={tile.low} high={tile.high} icon={tile.icon} />\r\n        ));\r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\r\nimport config from '../../config.json';\r\nimport './Time.css';\r\n\r\n\r\nclass Time extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date()\r\n        };\r\n    }\r\n\r\n    TimeMode() {\r\n        return config.TimeSettings.SelectedMode;\r\n    }\r\n\r\n    parse_time() {\r\n        const time_mode = this.TimeMode();\r\n        const {date} = this.state;\r\n        const h = date.getHours(), m = date.getMinutes().toString().padStart(2, '0');\r\n        var t_str = \"\";\r\n        switch(time_mode) {\r\n            case \"24HR\":\r\n                t_str = h.toString().padStart(2, '0') + \":\" + m;\r\n                break;\r\n            case \"12HR\":\r\n                var hours = h % 12;\r\n                t_str = ((hours === 0) ? 12 : hours) + \":\" + m + ((h >= 12) ? \"p\" : \"a\");\r\n                break;\r\n            default:\r\n                t_str = \"Invalid Time Mode\";\r\n                break;\r\n        }\r\n        return t_str;\r\n    }\r\n\r\n    //setup self-update interval\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000 //every second\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n    //self-update function\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {date} = this.state;\r\n        const MM = date.getMonth() + 1, DD = date.getDate(), YYYY = date.getFullYear().toString().padStart(4, '0');\r\n        return (\r\n            <div className=\"time-container\">\r\n                <div className=\"display-container\">\r\n                    <div className=\"time-display\">\r\n                        {this.parse_time()}\r\n                    </div>\r\n                    <div className=\"date-display\">\r\n                        {MM}/{DD}/{YYYY}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Time;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport './SettingsButton.css';\r\n\r\nconst NORMAL = \"sbcont\";\r\n\r\nclass SettingsButton extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            container: NORMAL\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {href} = this.props;\r\n        return (\r\n            <Link to={href}>\r\n                <div className=\"sbcont\">\r\n                    <div className=\"bar1\"></div>\r\n                    <div className=\"bar2\"></div>\r\n                    <div className=\"bar3\"></div>\r\n                </div>\r\n            </Link>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SettingsButton;","import React, { Component } from 'react';\r\nimport Weather from '../../components/Weather/Weather';\r\nimport Time from '../../components/Time/Time';\r\nimport SettingsButton from '../../components/SettingsButton/SettingsButton';\r\n\r\nimport config from '../../config.json';\r\n\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n\r\n    Location() {\r\n        return [config.LocationSettings.Zip, config.LocationSettings.Country];\r\n    }\r\n\r\n    render() {\r\n        const loc = this.Location();\r\n        const zip = loc[0], country = loc[1];\r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"content\">\r\n                    <div className=\"content-column\" id=\"time\">\r\n                        <Time zip={zip} country={country} />\r\n                    </div>\r\n                    <div className=\"content-column\" id=\"weather\">\r\n                        <Weather zip={zip} country={country} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"bottom-panel\">\r\n                    <SettingsButton href={'/settings'}/>\r\n                </div>\r\n                <div className=\"copyright\">\r\n                    Copyright {'\\u00A9'} 2019 Jared Massa\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport './Settings.css';\r\n\r\nclass Settings extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"settings-content\">\r\n                <a href={\"/\"}>\r\n                    <div className=\"back-button\">\r\n                        {\"<< Go Back 2\"}\r\n                    </div>\r\n                </a>\r\n                <div className=\"options-section\">\r\n                \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Settings;","import React, { Component } from 'react';\r\n\r\nclass Page404 extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{color:\"white\", textAlign:'center', width:\"100%\", height:\"100%\"}}>\r\n                <h1>404</h1>\r\n                <h3>Page not found.</h3>\r\n                <p>\r\n                    There's only two pages on this site...  What were you looking for?\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Page404;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Router, Route, Switch} from 'react-router-dom';\r\nimport {createHashHistory} from 'history';\r\n\r\nimport Home from './pages/Home/Home';\r\nimport Settings from './pages/Settings/Settings';\r\nimport Page404 from './pages/404/404';\r\n\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return(\r\n            <Switch>\r\n                {console.log(process.env.PUBLIC_URL)}\r\n                <Route exact path={process.env.PUBLIC_URL + '/'} component={Home} />\r\n                <Route exact path={process.env.PUBLIC_URL + '/settings'} component={Settings} />\r\n                <Route component={Page404} />\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nconst hashHistory = createHashHistory( {basename: process.env.PUBLIC_URL} );\r\nReactDOM.render(\r\n<Router history={hashHistory}>\r\n    <App />\r\n</Router>,\r\nroot);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}